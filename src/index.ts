import "dotenv/config";
import EventEmitter from "events";
import {
  Bot,
  CallbackQueryContext,
  InlineKeyboard,
  MessageContext,
} from "gramio";
import moment from "moment";
import { getStat } from "./helpers/getStat";
import {
  getChatsList,
  getLatestStat,
  isChatSubscribed,
  subscribeChat,
  unsubscribeChat,
} from "./helpers/updateConfigs";

export const emitter = new EventEmitter();

const bot = new Bot(process.env.TOKEN || "")
  .command("start", (context) =>
    context.send(
      "–ü—Ä–∏–≤–µ—Ç. –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /subscribe"
    )
  )
  .onStart(({ info }) => {
    console.log(`Started @${info.username}: https://t.me/${info.username}`);
  });

bot.command("subscribe", (context) => {
  if (isChatSubscribed(context.chat.id))
    return context.send(
      "–î–∞–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe"
    );
  subscribeChat(context.chatId);
  return context.send(
    "–¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–π —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ abit.polessu.by/monit (–±—é–¥–∂–µ—Ç)\n\n–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - /unsubscribe"
  );
});

async function statHandler(
  ctx: MessageContext<Bot> | CallbackQueryContext<Bot>
) {
  try {
    const data: {
      updateDate: string;
      data: {
        totalDocumentsByContest: number;
        facults_contest: Record<string, any>;
      };
    } = getLatestStat();
    const date = new Date();
    let facultsText = "";
    for (const [key, value] of Object.entries(data.data.facults_contest)) {
      facultsText += `${key}: <b>${value}</b>\n`;
    }

    return ctx
      .send(
        `–î–∞–Ω–Ω—ã–µ –Ω–∞ ${moment(date).format(
          "DD.MM.YYYY HH:mm"
        )}\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>${
          data.updateDate
        }</b>\n\n${facultsText}\n–í—Å–µ–≥–æ –ø–æ–¥–∞–≤—à–∏—Ö –∑–∞—è–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—É—Ä—Å): ${
          data.data.totalDocumentsByContest
        }\n\n<a href="https://abit.polessu.by/monit/?select=1,1,1">–û—Ç–∫—Ä—ã—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</a>`,
        { parse_mode: "HTML" }
      )
      .catch((err) => {
        console.log(err.message);
        if (ctx.is("callback_query"))
          return ctx.answer({
            show_alert: true,
            text: "–†–∞–∑—Ä–µ—à–∏—Ç–µ –±–æ—Ç—É –ø–∏—Å–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è",
          });
      })
      .then((res) => {
        if (ctx.is("callback_query")) return ctx.answer(undefined);
      });
  } catch (error) {}
}

bot.command("stat", statHandler);

bot.on("my_chat_member", (ctx) => {
  //   if (ctx.isPM()) return;
  if (
    ctx.newChatMember.user.id === Number(process.env.BOT_ID) &&
    ctx.newChatMember.status === "kicked"
  )
    return unsubscribeChat(ctx.chatId);
  if (
    ctx.newChatMember.user.id === Number(process.env.BOT_ID) &&
    ctx.newChatMember.status === "member" &&
    !ctx.isPM()
  )
    return ctx.send(
      `–¢–µ–ø–µ—Ä—å —è –≤ –≤–∞—à–µ–π –±–µ—Å–µ–¥–µ.\n\n–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe\n–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /stat`
    );

  if (
    ctx.newChatMember.user.id === Number(process.env.BOT_ID) &&
    ctx.newChatMember.status === "left"
  ) {
    unsubscribeChat(ctx.chatId);
  }
});

bot.command("unsubscribe", (context) => {
  if (!isChatSubscribed(context.chat.id))
    return context.send("–î–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");

  unsubscribeChat(context.chat.id);

  return context.send("–û—Ç–ª–∏—á–Ω–æ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
});

setInterval(getStat, 30000);

emitter.on("statUpdated", async (text) => {
  const chats = getChatsList();

  chats.forEach(async (chat) => {
    if (chat == 0) return;
    return await bot.api.sendMessage({
      chat_id: chat,
      text: text,
      parse_mode: "HTML",
      reply_markup: new InlineKeyboard().text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", "get_stats"),
    }).catch(err => {
      console.log(`Error while sending a notification`, err);
    })
  });
});

bot.on("callback_query", (ctx) => {
  if (ctx.queryPayload === "get_stats") return statHandler(ctx);

  return ctx.answer(undefined);
});

bot.start();
